// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jenkins-x/jx/pkg/kube/resources (interfaces: Installer)

package resources_test

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockInstaller struct {
	fail func(message string, callerSkip ...int)
}

func NewMockInstaller() *MockInstaller {
	return &MockInstaller{fail: pegomock.GlobalFailHandler}
}

func (mock *MockInstaller) Install(_param0 string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockInstaller().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Install", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockInstaller) InstallDir(_param0 string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockInstaller().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("InstallDir", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockInstaller) VerifyWasCalledOnce() *VerifierInstaller {
	return &VerifierInstaller{mock, pegomock.Times(1), nil}
}

func (mock *MockInstaller) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierInstaller {
	return &VerifierInstaller{mock, invocationCountMatcher, nil}
}

func (mock *MockInstaller) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierInstaller {
	return &VerifierInstaller{mock, invocationCountMatcher, inOrderContext}
}

type VerifierInstaller struct {
	mock                   *MockInstaller
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierInstaller) Install(_param0 string) *Installer_Install_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Install", params)
	return &Installer_Install_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Installer_Install_OngoingVerification struct {
	mock              *MockInstaller
	methodInvocations []pegomock.MethodInvocation
}

func (c *Installer_Install_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Installer_Install_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierInstaller) InstallDir(_param0 string) *Installer_InstallDir_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "InstallDir", params)
	return &Installer_InstallDir_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Installer_InstallDir_OngoingVerification struct {
	mock              *MockInstaller
	methodInvocations []pegomock.MethodInvocation
}

func (c *Installer_InstallDir_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Installer_InstallDir_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
